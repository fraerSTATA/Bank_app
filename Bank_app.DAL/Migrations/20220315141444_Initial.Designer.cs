// <auto-generated />
using System;
using Bank_app.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bank_app.DAL.Migrations
{
    [DbContext(typeof(Bank_appDB))]
    [Migration("20220315141444_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bank_app.DAL.Entityes.CheckedCreditRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreditRequestid")
                        .HasColumnType("int");

                    b.Property<string>("Employeeid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CreditRequestid");

                    b.HasIndex("Employeeid");

                    b.ToTable("CheckedCreditRequests");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreditViewid")
                        .HasColumnType("int");

                    b.Property<string>("Userid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("credit_sum")
                        .HasColumnType("int");

                    b.Property<int>("salary")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workbook")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CreditViewid");

                    b.HasIndex("Userid");

                    b.ToTable("CreditRequest");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("CreditTypes");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditView", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("CreditTypeid")
                        .HasColumnType("int");

                    b.Property<int>("credit_time")
                        .HasColumnType("int");

                    b.Property<int>("percent_credit")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CreditTypeid");

                    b.ToTable("CreditViews");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.Employee", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Postid")
                        .HasColumnType("int");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("passport")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Postid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("descript")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("INN")
                        .HasColumnType("int");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("passport")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CheckedCreditRequest", b =>
                {
                    b.HasOne("Bank_app.DAL.Entityes.CreditRequest", "CreditRequest")
                        .WithMany("CreditRequests")
                        .HasForeignKey("CreditRequestid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bank_app.DAL.Entityes.Employee", "Employee")
                        .WithMany("CheckedCreditRequests")
                        .HasForeignKey("Employeeid");

                    b.Navigation("CreditRequest");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditRequest", b =>
                {
                    b.HasOne("Bank_app.DAL.Entityes.CreditView", "CreditView")
                        .WithMany("CreditRequests")
                        .HasForeignKey("CreditViewid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bank_app.DAL.Entityes.User", "User")
                        .WithMany("CreditRequests")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditView");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditView", b =>
                {
                    b.HasOne("Bank_app.DAL.Entityes.CreditType", "CreditType")
                        .WithMany("Credit_views")
                        .HasForeignKey("CreditTypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditType");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.Employee", b =>
                {
                    b.HasOne("Bank_app.DAL.Entityes.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("Postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditRequest", b =>
                {
                    b.Navigation("CreditRequests");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditType", b =>
                {
                    b.Navigation("Credit_views");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.CreditView", b =>
                {
                    b.Navigation("CreditRequests");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.Employee", b =>
                {
                    b.Navigation("CheckedCreditRequests");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Bank_app.DAL.Entityes.User", b =>
                {
                    b.Navigation("CreditRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
